# -*- coding: utf-8 -*-
"""C114 linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RtFEhQe9gDhYJg3pzcHIP1bAO45Upi4T

### Linear Regression

\
Let's start by uploading the data first
"""

#Uploading the csv
from google.colab import files
data_to_load = files.upload()

"""Here, we have a data for the height and weight of some people. Let's plot this, with x-coordinate as the height and y-coordinate as the weight."""

import pandas as pd
import plotly.express as px

df = pd.read_csv("data.csv")

height = df["Height"].tolist()
weight = df["Weight"].tolist()

fig = px.scatter(x=height, y=weight)
fig.show()

"""Here we can see that both the height and the weight are related to each other. The more the height, the more the weight.

\
Every line has a formula. The formula is as follows -
\
```
y = mx + c
```

We know all the values in the X coordinate. Let's try to plot a line on the graph above. For this, we will assume the values of M and C and we will use the hit and trial method.

"""

m = 1
c = 0
y = []
for x in height:
  y_value = m*x + c
  y.append(y_value)

#Plotting the points
fig = px.scatter(x=height, y=weight)
fig.update_layout(shapes=[
    dict(
      type= 'line',
      y0= min(y), y1= max(y),
      x0= min(height), x1= max(height)
    )
])
fig.show()

"""Here, it looks like the line that we have taken is worlds apart. Let's try to change the values of M and C in such a way that this line fits well with the scatter plots."""

m = 0.95
c = -93
y = []
for x in height:
  y_value = m*x + c
  y.append(y_value)

#Plotting the points
fig = px.scatter(x=height, y=weight)
fig.update_layout(shapes=[
    dict(
      type= 'line',
      y0= min(y), y1= max(y),
      x0= min(height), x1= max(height)
    )
])
fig.show()

"""Here, we have a close enough line that covers all the scatter plots in our chart. 

\
Here, the M is the slope of the line and the C is the intercept of the line.

\
Can we predict the weight of someone whose height is 250 using this formula? Let's see!
"""

x = 250
y = m * x + c
print(f"Weight of someone with height {x} is {y}")

"""Great! Since we have achieved the values of our slope and intercept with the hit and trial method, we might be a bit less accurate. There are pre-built computer algorithms that give us the value of the slope and the intercept.

\
Let's find the slope and the intercept of the data that we have using computer algorithms and plot again with the new values of M and C.
"""

import numpy as np
height_array = np.array(height)
weight_array = np.array(weight)

#Slope and intercept using pre-built function of Numpy
m, c = np.polyfit(height_array, weight_array, 1)

y = []
for x in height_array:
  y_value = m*x + c
  y.append(y_value)

#plotting the graph
fig = px.scatter(x=height_array, y=weight_array)
fig.update_layout(shapes=[
    dict(
      type= 'line',
      y0= min(y), y1= max(y),
      x0= min(height_array), x1= max(height_array)
    )
])
fig.show()

"""This is the best fit line for the data that the computer algorithm has provided us. Let's see what will be the weight of someone with height 250 using these new values of the slope and the intercept."""

x = 250
y = m * x + c
print(f"Weight of someone with height {x} is {y}")

"""We earlier got the value of 144.5 and with the computer provided best fit line, we got a result of 144.34

\
Great job!

\
### Conclusion
You just built a model to predict the weight of a person based on the height.
"""

